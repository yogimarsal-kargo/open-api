// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/order/init.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kargotech/go-testapp/internal/entity"
	unitofwork "github.com/kargotech/gokargo/unitofwork"
	consistency "github.com/kargotech/gokargo/unitofwork/consistency"
)

// MockOrderResourceItf is a mock of OrderResourceItf interface.
type MockOrderResourceItf struct {
	ctrl     *gomock.Controller
	recorder *MockOrderResourceItfMockRecorder
}

// MockOrderResourceItfMockRecorder is the mock recorder for MockOrderResourceItf.
type MockOrderResourceItfMockRecorder struct {
	mock *MockOrderResourceItf
}

// NewMockOrderResourceItf creates a new mock instance.
func NewMockOrderResourceItf(ctrl *gomock.Controller) *MockOrderResourceItf {
	mock := &MockOrderResourceItf{ctrl: ctrl}
	mock.recorder = &MockOrderResourceItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderResourceItf) EXPECT() *MockOrderResourceItfMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderResourceItf) CreateOrder(ctx context.Context, orderInput entity.CreateOrder, cs consistency.ConsistencyItf) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderInput, cs)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderResourceItfMockRecorder) CreateOrder(ctx, orderInput, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderResourceItf)(nil).CreateOrder), ctx, orderInput, cs)
}

// GetOrderByID mocks base method.
func (m *MockOrderResourceItf) GetOrderByID(ctx context.Context, id string) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderResourceItfMockRecorder) GetOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderResourceItf)(nil).GetOrderByID), ctx, id)
}

// UpdateOrder mocks base method.
func (m *MockOrderResourceItf) UpdateOrder(ctx context.Context, orderInput entity.UpdateOrder, cs consistency.ConsistencyItf) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, orderInput, cs)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderResourceItfMockRecorder) UpdateOrder(ctx, orderInput, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderResourceItf)(nil).UpdateOrder), ctx, orderInput, cs)
}

// MockUnitOfWorkItf is a mock of UnitOfWorkItf interface.
type MockUnitOfWorkItf struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkItfMockRecorder
}

// MockUnitOfWorkItfMockRecorder is the mock recorder for MockUnitOfWorkItf.
type MockUnitOfWorkItfMockRecorder struct {
	mock *MockUnitOfWorkItf
}

// NewMockUnitOfWorkItf creates a new mock instance.
func NewMockUnitOfWorkItf(ctrl *gomock.Controller) *MockUnitOfWorkItf {
	mock := &MockUnitOfWorkItf{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWorkItf) EXPECT() *MockUnitOfWorkItfMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUnitOfWorkItf) Do(ctx context.Context, auditEventInput *unitofwork.AuditEventInput, fn func(consistency.ConsistencyItf) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, auditEventInput, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUnitOfWorkItfMockRecorder) Do(ctx, auditEventInput, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUnitOfWorkItf)(nil).Do), ctx, auditEventInput, fn)
}
