// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kargotech/go-testapp/internal/entity"
)

// MockOrderUCItf is a mock of OrderUCItf interface.
type MockOrderUCItf struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUCItfMockRecorder
}

// MockOrderUCItfMockRecorder is the mock recorder for MockOrderUCItf.
type MockOrderUCItfMockRecorder struct {
	mock *MockOrderUCItf
}

// NewMockOrderUCItf creates a new mock instance.
func NewMockOrderUCItf(ctrl *gomock.Controller) *MockOrderUCItf {
	mock := &MockOrderUCItf{ctrl: ctrl}
	mock.recorder = &MockOrderUCItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUCItf) EXPECT() *MockOrderUCItfMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderUCItf) CreateOrder(ctx context.Context, orderInput entity.CreateOrder) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderInput)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderUCItfMockRecorder) CreateOrder(ctx, orderInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderUCItf)(nil).CreateOrder), ctx, orderInput)
}

// GetOrderByID mocks base method.
func (m *MockOrderUCItf) GetOrderByID(ctx context.Context, id string) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderUCItfMockRecorder) GetOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderUCItf)(nil).GetOrderByID), ctx, id)
}

// UpdateOrder mocks base method.
func (m *MockOrderUCItf) UpdateOrder(ctx context.Context, orderInput entity.UpdateOrder) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, orderInput)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderUCItfMockRecorder) UpdateOrder(ctx, orderInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderUCItf)(nil).UpdateOrder), ctx, orderInput)
}
